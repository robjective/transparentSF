--
-- PostgreSQL database dump
--

-- Dumped from database version 14.17 (Homebrew)
-- Dumped by pg_dump version 14.17 (Homebrew)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: metrics; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.metrics (
    id integer NOT NULL,
    metric_name text NOT NULL,
    metric_key text NOT NULL,
    category text NOT NULL,
    subcategory text,
    endpoint text NOT NULL,
    summary text,
    definition text,
    data_sf_url text,
    ytd_query text,
    metric_query text,
    dataset_title text,
    dataset_category text,
    show_on_dash boolean DEFAULT true,
    item_noun text DEFAULT 'Items'::text,
    greendirection text DEFAULT 'up'::text,
    location_fields jsonb DEFAULT '[]'::jsonb,
    category_fields jsonb DEFAULT '[]'::jsonb,
    metadata jsonb DEFAULT '{}'::jsonb,
    is_active boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.metrics OWNER TO postgres;

--
-- Name: metrics_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.metrics_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.metrics_id_seq OWNER TO postgres;

--
-- Name: metrics_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.metrics_id_seq OWNED BY public.metrics.id;


--
-- Name: metrics id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.metrics ALTER COLUMN id SET DEFAULT nextval('public.metrics_id_seq'::regclass);


--
-- Data for Name: metrics; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.metrics (id, metric_name, metric_key, category, subcategory, endpoint, summary, definition, data_sf_url, ytd_query, metric_query, dataset_title, dataset_category, show_on_dash, item_noun, greendirection, location_fields, category_fields, metadata, is_active, created_at, updated_at) FROM stdin;
1	👮 Total Police Incidents	police_total_police_incidents_1	crime	Crime	wg3w-h783	Total count of all police incident reports filed by officers or self-reported by members of the public using SFPD's online reporting system.	Total count of all police incident reports filed by officers or self-reported by members of the public using SFPD's online reporting system.	https://data.sfgov.org/Public-Safety/Police-Department-Incident-Reports-2018-to-Present/wg3w-h783	SELECT date_trunc_ymd(Report_Datetime) as date, COUNT(*) as value WHERE Report_Datetime >= last_year_start AND Report_Datetime <= current_date GROUP BY date ORDER BY date	SELECT 'Total Reports' as label, max(Report_Datetime) as max_date, COUNT(CASE WHEN Report_Datetime >= this_year_start AND Report_Datetime <= this_year_end THEN 1 END) as this_year, COUNT(CASE WHEN Report_Datetime >= last_year_start AND Report_Datetime <= last_year_end THEN 1 END) as last_year, (COUNT(CASE WHEN Report_Datetime >= this_year_start AND Report_Datetime <= this_year_end THEN 1 END) - COUNT(CASE WHEN Report_Datetime >= last_year_start AND Report_Datetime <= last_year_end THEN 1 END)) as delta, ((COUNT(CASE WHEN Report_Datetime >= this_year_start AND Report_Datetime <= this_year_end THEN 1 END) - COUNT(CASE WHEN Report_Datetime >= last_year_start AND Report_Datetime <= last_year_end THEN 1 END)) * 100.0 / NULLIF(COUNT(CASE WHEN Report_Datetime >= last_year_start AND Report_Datetime <= last_year_end THEN 1 END), 0)) as perc_diff, supervisor_district group by supervisor_district			t	Incidents	down	[]	[{"name": "report_type_description", "fieldName": "report_type_description", "description": "Selected column for enhanced dashboard queries"}, {"name": "incident_category", "fieldName": "incident_category", "description": "Selected column for enhanced dashboard queries"}, {"name": "incident_subcategory", "fieldName": "incident_subcategory", "description": "Selected column for enhanced dashboard queries"}, {"name": "supervisor_district", "fieldName": "supervisor_district", "description": "Selected column for enhanced dashboard queries"}]	{"id": 1, "original_category": "crime", "original_subcategory": "Crime", "original_subsubcategory": null}	t	2025-05-27 20:34:15.325786	2025-05-27 20:34:15.325786
2	🚨 Violent Crime Incidents	violent_violent_crime_incidents_2	crime	Crime	wg3w-h783	Count of reported violent crime incidents, including assaults, homicides, rapes, robberies, human trafficking, weapons offenses, and offenses against family/children.	Count of reported violent crime incidents. Violent crimes are defined as incidents categorized as: Assault, Homicide, Rape, Robbery, Human Trafficking (Commercial Sex Acts and Involuntary Servitude), Offences Against The Family And Children, and Weapons Offenses.	https://data.sfgov.org/Public-Safety/Police-Department-Incident-Reports-2018-to-Present/wg3w-h783	SELECT date_trunc_ymd(Report_Datetime) as date, COUNT(*) as value WHERE Report_Datetime >= last_year_start AND Report_Datetime <= current_date AND Incident_Category IN ('Assault', 'Homicide', 'Rape', 'Robbery', 'Human Trafficking (A), Commercial Sex Acts', 'Human Trafficking, Commercial Sex Acts', 'Human Trafficking (B), Involuntary Servitude', 'Offences Against The Family And Children', 'Weapons Carrying Etc', 'Weapons Offense', 'Weapons Offence') GROUP BY date ORDER BY date	SELECT 'Violent Crime' as label, max(Report_Datetime) as max_date, COUNT(CASE WHEN Report_Datetime >= this_year_start AND Report_Datetime <= this_year_end AND Incident_Category IN ('Assault', 'Homicide', 'Rape', 'Robbery', 'Human Trafficking (A), Commercial Sex Acts', 'Human Trafficking, Commercial Sex Acts', 'Human Trafficking (B), Involuntary Servitude', 'Offences Against The Family And Children', 'Weapons Carrying Etc', 'Weapons Offense', 'Weapons Offence') THEN 1 END) as this_year, COUNT(CASE WHEN Report_Datetime >= last_year_start AND Report_Datetime <= last_year_end AND Incident_Category IN ('Assault', 'Homicide', 'Rape', 'Robbery', 'Human Trafficking (A), Commercial Sex Acts', 'Human Trafficking, Commercial Sex Acts', 'Human Trafficking (B), Involuntary Servitude', 'Offences Against The Family And Children', 'Weapons Carrying Etc', 'Weapons Offense', 'Weapons Offence') THEN 1 END) as last_year, (COUNT(CASE WHEN Report_Datetime >= this_year_start AND Report_Datetime <= this_year_end AND Incident_Category IN ('Assault', 'Homicide', 'Rape', 'Robbery', 'Human Trafficking (A), Commercial Sex Acts', 'Human Trafficking, Commercial Sex Acts', 'Human Trafficking (B), Involuntary Servitude', 'Offences Against The Family And Children', 'Weapons Carrying Etc', 'Weapons Offense', 'Weapons Offence') THEN 1 END) - COUNT(CASE WHEN Report_Datetime >= last_year_start AND Report_Datetime <= last_year_end AND Incident_Category IN ('Assault', 'Homicide', 'Rape', 'Robbery', 'Human Trafficking (A), Commercial Sex Acts', 'Human Trafficking, Commercial Sex Acts', 'Human Trafficking (B), Involuntary Servitude', 'Offences Against The Family And Children', 'Weapons Carrying Etc', 'Weapons Offense', 'Weapons Offence') THEN 1 END)) as delta, ((COUNT(CASE WHEN Report_Datetime >= this_year_start AND Report_Datetime <= this_year_end AND Incident_Category IN ('Assault', 'Homicide', 'Rape', 'Robbery', 'Human Trafficking (A), Commercial Sex Acts', 'Human Trafficking, Commercial Sex Acts', 'Human Trafficking (B), Involuntary Servitude', 'Offences Against The Family And Children', 'Weapons Carrying Etc', 'Weapons Offense', 'Weapons Offence') THEN 1 END) - COUNT(CASE WHEN Report_Datetime >= last_year_start AND Report_Datetime <= last_year_end AND Incident_Category IN ('Assault', 'Homicide', 'Rape', 'Robbery', 'Human Trafficking (A), Commercial Sex Acts', 'Human Trafficking, Commercial Sex Acts', 'Human Trafficking (B), Involuntary Servitude', 'Offences Against The Family And Children', 'Weapons Carrying Etc', 'Weapons Offense', 'Weapons Offence') THEN 1 END)) * 100.0 / NULLIF(COUNT(CASE WHEN Report_Datetime >= last_year_start AND Report_Datetime <= last_year_end AND Incident_Category IN ('Assault', 'Homicide', 'Rape', 'Robbery', 'Human Trafficking (A), Commercial Sex Acts', 'Human Trafficking, Commercial Sex Acts', 'Human Trafficking (B), Involuntary Servitude', 'Offences Against The Family And Children', 'Weapons Carrying Etc', 'Weapons Offense', 'Weapons Offence') THEN 1 END), 0)) as perc_diff, supervisor_district group by supervisor_district			t	Incidents	down	[]	[{"name": "report_type_description", "fieldName": "report_type_description", "description": "Selected column for enhanced dashboard queries"}, {"name": "incident_category", "fieldName": "incident_category", "description": "Selected column for enhanced dashboard queries"}, {"name": "incident_subcategory", "fieldName": "incident_subcategory", "description": "Selected column for enhanced dashboard queries"}, {"name": "supervisor_district", "fieldName": "supervisor_district", "description": "Selected column for enhanced dashboard queries"}]	{"id": 2, "original_category": "crime", "original_subcategory": "Crime", "original_subsubcategory": null}	t	2025-05-27 20:34:15.325786	2025-05-27 20:34:15.325786
3	🏠 Property Crime Incidents	property_property_crime_incidents_3	crime	Crime	wg3w-h783		Property crimes are defined as incidents categorized as: Arson, Burglary, Forgery And Counterfeiting, Fraud, Larceny Theft, Motor Vehicle Theft, Stolen Property, Vandalism, Embezzlement, and Recovered Vehicle.	https://data.sfgov.org/Public-Safety/Police-Department-Incident-Reports-2018-to-Present/wg3w-h783	SELECT date_trunc_ymd(Report_Datetime) as date, COUNT(*) as value WHERE Report_Datetime >= last_year_start AND Report_Datetime <= current_date AND Incident_Category IN ('Arson', 'Burglary', 'Forgery And Counterfeiting', 'Fraud', 'Larceny Theft', 'Motor Vehicle Theft', 'Stolen Property', 'Vandalism', 'Embezzlement', 'Recovered Vehicle') GROUP BY date ORDER BY date	SELECT 'Property Crime' as label, max(Report_Datetime) as max_date, COUNT(CASE WHEN Report_Datetime >= this_year_start AND Report_Datetime <= this_year_end AND Incident_Category IN ('Arson', 'Burglary', 'Forgery And Counterfeiting', 'Fraud', 'Larceny Theft', 'Motor Vehicle Theft', 'Stolen Property', 'Vandalism', 'Embezzlement', 'Recovered Vehicle') THEN 1 END) as this_year, COUNT(CASE WHEN Report_Datetime >= last_year_start AND Report_Datetime <= last_year_end AND Incident_Category IN ('Arson', 'Burglary', 'Forgery And Counterfeiting', 'Fraud', 'Larceny Theft', 'Motor Vehicle Theft', 'Stolen Property', 'Vandalism', 'Embezzlement', 'Recovered Vehicle') THEN 1 END) as last_year, (COUNT(CASE WHEN Report_Datetime >= this_year_start AND Report_Datetime <= this_year_end AND Incident_Category IN ('Arson', 'Burglary', 'Forgery And Counterfeiting', 'Fraud', 'Larceny Theft', 'Motor Vehicle Theft', 'Stolen Property', 'Vandalism', 'Embezzlement', 'Recovered Vehicle') THEN 1 END) - COUNT(CASE WHEN Report_Datetime >= last_year_start AND Report_Datetime <= last_year_end AND Incident_Category IN ('Arson', 'Burglary', 'Forgery And Counterfeiting', 'Fraud', 'Larceny Theft', 'Motor Vehicle Theft', 'Stolen Property', 'Vandalism', 'Embezzlement', 'Recovered Vehicle') THEN 1 END)) as delta, ((COUNT(CASE WHEN Report_Datetime >= this_year_start AND Report_Datetime <= this_year_end AND Incident_Category IN ('Arson', 'Burglary', 'Forgery And Counterfeiting', 'Fraud', 'Larceny Theft', 'Motor Vehicle Theft', 'Stolen Property', 'Vandalism', 'Embezzlement', 'Recovered Vehicle') THEN 1 END) - COUNT(CASE WHEN Report_Datetime >= last_year_start AND Report_Datetime <= last_year_end AND Incident_Category IN ('Arson', 'Burglary', 'Forgery And Counterfeiting', 'Fraud', 'Larceny Theft', 'Motor Vehicle Theft', 'Stolen Property', 'Vandalism', 'Embezzlement', 'Recovered Vehicle') THEN 1 END)) * 100.0 / NULLIF(COUNT(CASE WHEN Report_Datetime >= last_year_start AND Report_Datetime <= last_year_end AND Incident_Category IN ('Arson', 'Burglary', 'Forgery And Counterfeiting', 'Fraud', 'Larceny Theft', 'Motor Vehicle Theft', 'Stolen Property', 'Vandalism', 'Embezzlement', 'Recovered Vehicle') THEN 1 END), 0)) as perc_diff, supervisor_district group by supervisor_district			t	Incidents	down	[]	[{"name": "report_type_description", "fieldName": "report_type_description", "description": "Selected column for enhanced dashboard queries"}, {"name": "incident_category", "fieldName": "incident_category", "description": "Selected column for enhanced dashboard queries"}, {"name": "incident_subcategory", "fieldName": "incident_subcategory", "description": "Selected column for enhanced dashboard queries"}, {"name": "supervisor_district", "fieldName": "supervisor_district", "description": "Selected column for enhanced dashboard queries"}]	{"id": 3, "original_category": "crime", "original_subcategory": "Crime", "original_subsubcategory": null}	t	2025-05-27 20:34:15.325786	2025-05-27 20:34:15.325786
4	💊 Drug Crime Incidents	drug_drug_crime_incidents_4	crime	Crime	wg3w-h783	Count of reported drug crime incidents, including drug offenses and drug violations.	Drug crimes are defined as incidents categorized as: Drug Offense and Drug Violation.	https://data.sfgov.org/Public-Safety/Police-Department-Incident-Reports-2018-to-Present/wg3w-h783	SELECT date_trunc_ymd(Report_Datetime) as date, COUNT(*) as value WHERE Report_Datetime >= last_year_start AND Report_Datetime <= current_date AND Incident_Category IN ('Drug Offense', 'Drug Violation') GROUP BY date ORDER BY date	SELECT 'Drug Crime' as label, max(Report_Datetime) as max_date, COUNT(CASE WHEN Report_Datetime >= this_year_start AND Report_Datetime <= this_year_end AND Incident_Category IN ('Drug Offense', 'Drug Violation') THEN 1 END) as this_year, COUNT(CASE WHEN Report_Datetime >= last_year_start AND Report_Datetime <= last_year_end AND Incident_Category IN ('Drug Offense', 'Drug Violation') THEN 1 END) as last_year, (COUNT(CASE WHEN Report_Datetime >= this_year_start AND Report_Datetime <= this_year_end AND Incident_Category IN ('Drug Offense', 'Drug Violation') THEN 1 END) - COUNT(CASE WHEN Report_Datetime >= last_year_start AND Report_Datetime <= last_year_end AND Incident_Category IN ('Drug Offense', 'Drug Violation') THEN 1 END)) as delta, ((COUNT(CASE WHEN Report_Datetime >= this_year_start AND Report_Datetime <= this_year_end AND Incident_Category IN ('Drug Offense', 'Drug Violation') THEN 1 END) - COUNT(CASE WHEN Report_Datetime >= last_year_start AND Report_Datetime <= last_year_end AND Incident_Category IN ('Drug Offense', 'Drug Violation') THEN 1 END)) * 100.0 / NULLIF(COUNT(CASE WHEN Report_Datetime >= last_year_start AND Report_Datetime <= last_year_end AND Incident_Category IN ('Drug Offense', 'Drug Violation') THEN 1 END), 0)) as perc_diff, supervisor_district group by supervisor_district			t	Incidents	down	[]	[{"name": "report_type_description", "fieldName": "report_type_description", "description": "Selected column for enhanced dashboard queries"}, {"name": "incident_category", "fieldName": "incident_category", "description": "Selected column for enhanced dashboard queries"}, {"name": "incident_subcategory", "fieldName": "incident_subcategory", "description": "Selected column for enhanced dashboard queries"}, {"name": "supervisor_district", "fieldName": "supervisor_district", "description": "Selected column for enhanced dashboard queries"}]	{"id": 4, "original_category": "crime", "original_subcategory": "Crime", "original_subsubcategory": null}	t	2025-05-27 20:34:15.325786	2025-05-27 20:34:15.325786
5	🔒 Jail Bookings	jail_jail_bookings_5	crime	jail	pfbp-75pz	Total count of individuals booked into San Francisco City and County Jail.	Tracks the total number of jail bookings. Each booking represents when an individual is processed into jail custody after arrest. The booking process includes recording personal information, fingerprinting, and photographing. A single person may have multiple bookings.	https://data.sfgov.org/Public-Safety/Sheriff-Jail-Bookings-by-Age-Group/pfbp-75pz	SELECT date_trunc_ym(month_and_year_of_booking) as date, SUM(count_of_bookings) as value WHERE month_and_year_of_booking >= last_year_start AND month_and_year_of_booking <= current_date GROUP BY date ORDER BY date	SELECT 'Total Bookings' as label, max(month_and_year_of_booking) as max_date, SUM(CASE WHEN month_and_year_of_booking >= this_year_start AND month_and_year_of_booking <= this_year_end THEN count_of_bookings END) as this_year, SUM(CASE WHEN month_and_year_of_booking >= last_year_start AND month_and_year_of_booking <= last_year_end THEN count_of_bookings END) as last_year, (SUM(CASE WHEN month_and_year_of_booking >= this_year_start AND month_and_year_of_booking <= this_year_end THEN count_of_bookings END) - SUM(CASE WHEN month_and_year_of_booking >= last_year_start AND month_and_year_of_booking <= last_year_end THEN count_of_bookings END)) as delta, ((SUM(CASE WHEN month_and_year_of_booking >= this_year_start AND month_and_year_of_booking <= this_year_end THEN count_of_bookings END) - SUM(CASE WHEN month_and_year_of_booking >= last_year_start AND month_and_year_of_booking <= last_year_end THEN count_of_bookings END)) * 100.0 / NULLIF(SUM(CASE WHEN month_and_year_of_booking >= last_year_start AND month_and_year_of_booking <= last_year_end THEN count_of_bookings END), 0)) as perc_diff			t	Bookings	down	[]	[{"name": "age_group", "fieldName": "age_group", "description": "Age range of the booked individual"}]	{"id": 5, "original_category": "crime", "original_subcategory": "jail", "original_subsubcategory": null}	t	2025-05-27 20:34:15.325786	2025-05-27 20:34:15.325786
6	🚓 Arrests Presented to DA	arrests_arrests_presented_to_da_6	crime	DA	czsm-3ei3	Total count of arrests presented to the District Attorney's office for review.	Count of all arrests presented to the District Attorney's office for review. Each record represents an arrest that has been presented to the SFDA for a charging decision, regardless of the final action taken.	https://data.sfgov.org/Public-Safety/District-Attorney-Actions-Taken-on-Arrests-Present/czsm-3ei3	SELECT date_trunc_ymd(arrest_date) as date, COUNT(*) as value WHERE arrest_date >= last_year_start AND arrest_date <= current_date GROUP BY date ORDER BY date	SELECT 'Total Arrests Presented' as label, max(arrest_date) as max_date, COUNT(CASE WHEN arrest_date >= this_year_start AND arrest_date <= this_year_end THEN 1 END) as this_year, COUNT(CASE WHEN arrest_date >= last_year_start AND arrest_date <= last_year_end THEN 1 END) as last_year, (COUNT(CASE WHEN arrest_date >= this_year_start AND arrest_date <= this_year_end THEN 1 END) - COUNT(CASE WHEN arrest_date >= last_year_start AND arrest_date <= last_year_end THEN 1 END)) as delta, ((COUNT(CASE WHEN arrest_date >= this_year_start AND arrest_date <= this_year_end THEN 1 END) - COUNT(CASE WHEN arrest_date >= last_year_start AND arrest_date <= last_year_end THEN 1 END)) * 100.0 / NULLIF(COUNT(CASE WHEN arrest_date >= last_year_start AND arrest_date <= last_year_end THEN 1 END), 0)) as perc_diff			t	Arrests	down	[]	[{"name": "arresting_agency", "fieldName": "arresting_agency", "description": "Selected column for enhanced dashboard queries"}, {"name": "crime_type", "fieldName": "crime_type", "description": "Selected column for enhanced dashboard queries"}, {"name": "booked_case_type", "fieldName": "booked_case_type", "description": "Selected column for enhanced dashboard queries"}, {"name": "da_action_taken", "fieldName": "da_action_taken", "description": "Selected column for enhanced dashboard queries"}]	{"id": 6, "original_category": "crime", "original_subcategory": "DA", "original_subsubcategory": null}	t	2025-05-27 20:34:15.325786	2025-05-27 20:34:15.325786
7	⚖️ DA Convictions	convictions_da_convictions_7	crime	DA	ynfy-z5kt	Total count of criminal cases that resulted in a conviction, including guilty pleas and trial convictions.	Count of criminal cases prosecuted by the District Attorney's Office that resulted in a conviction. This includes cases where the defendant pleaded guilty or was found guilty at trial. Each case represents a unique defendant and incident combination.	https://data.sfgov.org/Public-Safety/District-Attorney-Case-Resolutions/ynfy-z5kt	SELECT date_trunc_ymd(disposition_date) as date, COUNT(*) as value WHERE disposition_date >= last_year_start AND disposition_date <= current_date AND case_status LIKE '%Conviction%'  GROUP BY date ORDER BY date	SELECT 'Total Convictions' as label, max(disposition_date) as max_date, COUNT(CASE WHEN disposition_date >= this_year_start AND disposition_date <= this_year_end AND case_status LIKE '%Conviction%' THEN 1 END) as this_year, COUNT(CASE WHEN disposition_date >= last_year_start AND disposition_date <= last_year_end AND case_status LIKE '%Conviction%' THEN 1 END) as last_year, (COUNT(CASE WHEN disposition_date >= this_year_start AND disposition_date <= this_year_end AND case_status LIKE '%Conviction%' THEN 1 END) - COUNT(CASE WHEN disposition_date >= last_year_start AND disposition_date <= last_year_end AND case_status LIKE '%Conviction%' THEN 1 END)) as delta, ((COUNT(CASE WHEN disposition_date >= this_year_start AND disposition_date <= this_year_end AND case_status LIKE '%Conviction%' THEN 1 END) - COUNT(CASE WHEN disposition_date >= last_year_start AND disposition_date <= last_year_end AND case_status LIKE '%Conviction%' THEN 1 END)) * 100.0 / NULLIF(COUNT(CASE WHEN disposition_date >= last_year_start AND disposition_date <= last_year_end AND case_status LIKE '%Conviction%' THEN 1 END), 0)) as perc_diff			t	Convictions	down	[]	[{"name": "crime_type", "fieldName": "crime_type", "description": "Selected column for enhanced dashboard queries"}, {"name": "filed_case_type", "fieldName": "filed_case_type", "description": "Selected column for enhanced dashboard queries"}, {"name": "disposition_description", "fieldName": "disposition_description", "description": "Selected column for enhanced dashboard queries"}, {"name": "case_status", "fieldName": "case_status", "description": "Selected column for enhanced dashboard queries"}]	{"id": 7, "original_category": "crime", "original_subcategory": "DA", "original_subsubcategory": null}	t	2025-05-27 20:34:15.325786	2025-05-27 20:34:15.325786
8	🚑 911 Response (minutes) - Danger to life	response_911_response_minutes_danger_to_life_10	safety	emergency_response	2zdj-bwza	Average response time in minutes for Priority A emergency calls.	Measures the time between when a 911 call is received and when the first unit arrives on scene for Priority A (highest priority, danger to life) calls. Data comes from the Department of Emergency Management's Computer Aided Dispatch (CAD) System. Only includes calls where both received and onscene times are recorded and valid.	https://data.sfgov.org/resource/2zdj-bwza.json	SELECT date_trunc_ymd(received_datetime) as date, AVG((date_extract_y(onscene_datetime) - date_extract_y(received_datetime)) * 525600 + (date_extract_m(onscene_datetime) - date_extract_m(received_datetime)) * 43800 + (date_extract_d(onscene_datetime) - date_extract_d(received_datetime)) * 1440 + (date_extract_hh(onscene_datetime) * 60 + date_extract_mm(onscene_datetime)) - (date_extract_hh(received_datetime) * 60 + date_extract_mm(received_datetime))) as value WHERE received_datetime >= last_year_start AND received_datetime < current_date AND received_datetime IS NOT NULL AND onscene_datetime IS NOT NULL AND received_datetime < onscene_datetime AND priority_final = 'A' GROUP BY date ORDER BY date	SELECT 'Priority A Response Time' as label, max(received_datetime) as max_date, AVG(CASE WHEN received_datetime >= this_year_start AND received_datetime <= this_year_end THEN ((date_extract_y(onscene_datetime) - date_extract_y(received_datetime)) * 525600 + (date_extract_m(onscene_datetime) - date_extract_m(received_datetime)) * 43800 + (date_extract_d(onscene_datetime) - date_extract_d(received_datetime)) * 1440 + (date_extract_hh(onscene_datetime) * 60 + date_extract_mm(onscene_datetime)) - (date_extract_hh(received_datetime) * 60 + date_extract_mm(received_datetime))) END) as this_year, AVG(CASE WHEN received_datetime >= last_year_start AND received_datetime <= last_year_end THEN ((date_extract_y(onscene_datetime) - date_extract_y(received_datetime)) * 525600 + (date_extract_m(onscene_datetime) - date_extract_m(received_datetime)) * 43800 + (date_extract_d(onscene_datetime) - date_extract_d(received_datetime)) * 1440 + (date_extract_hh(onscene_datetime) * 60 + date_extract_mm(onscene_datetime)) - (date_extract_hh(received_datetime) * 60 + date_extract_mm(received_datetime))) END) as last_year, (AVG(CASE WHEN received_datetime >= this_year_start AND received_datetime <= this_year_end THEN ((date_extract_y(onscene_datetime) - date_extract_y(received_datetime)) * 525600 + (date_extract_m(onscene_datetime) - date_extract_m(received_datetime)) * 43800 + (date_extract_d(onscene_datetime) - date_extract_d(received_datetime)) * 1440 + (date_extract_hh(onscene_datetime) * 60 + date_extract_mm(onscene_datetime)) - (date_extract_hh(received_datetime) * 60 + date_extract_mm(received_datetime))) END) - AVG(CASE WHEN received_datetime >= last_year_start AND received_datetime <= last_year_end THEN ((date_extract_y(onscene_datetime) - date_extract_y(received_datetime)) * 525600 + (date_extract_m(onscene_datetime) - date_extract_m(received_datetime)) * 43800 + (date_extract_d(onscene_datetime) - date_extract_d(received_datetime)) * 1440 + (date_extract_hh(onscene_datetime) * 60 + date_extract_mm(onscene_datetime)) - (date_extract_hh(received_datetime) * 60 + date_extract_mm(received_datetime))) END)) as delta, ((AVG(CASE WHEN received_datetime >= this_year_start AND received_datetime <= this_year_end THEN ((date_extract_y(onscene_datetime) - date_extract_y(received_datetime)) * 525600 + (date_extract_m(onscene_datetime) - date_extract_m(received_datetime)) * 43800 + (date_extract_d(onscene_datetime) - date_extract_d(received_datetime)) * 1440 + (date_extract_hh(onscene_datetime) * 60 + date_extract_mm(onscene_datetime)) - (date_extract_hh(received_datetime) * 60 + date_extract_mm(received_datetime))) END) - AVG(CASE WHEN received_datetime >= last_year_start AND received_datetime <= last_year_end THEN ((date_extract_y(onscene_datetime) - date_extract_y(received_datetime)) * 525600 + (date_extract_m(onscene_datetime) - date_extract_m(received_datetime)) * 43800 + (date_extract_d(onscene_datetime) - date_extract_d(received_datetime)) * 1440 + (date_extract_hh(onscene_datetime) * 60 + date_extract_mm(onscene_datetime)) - (date_extract_hh(received_datetime) * 60 + date_extract_mm(received_datetime))) END)) * 100.0 / NULLIF(AVG(CASE WHEN received_datetime >= last_year_start AND received_datetime <= last_year_end THEN ((date_extract_y(onscene_datetime) - date_extract_y(received_datetime)) * 525600 + (date_extract_m(onscene_datetime) - date_extract_m(received_datetime)) * 43800 + (date_extract_d(onscene_datetime) - date_extract_d(received_datetime)) * 1440 + (date_extract_hh(onscene_datetime) * 60 + date_extract_mm(onscene_datetime)) - (date_extract_hh(received_datetime) * 60 + date_extract_mm(received_datetime))) END), 0)) as perc_diff, supervisor_district WHERE received_datetime IS NOT NULL AND onscene_datetime IS NOT NULL AND received_datetime < onscene_datetime AND priority_final = 'A' GROUP BY supervisor_district			t	Responses	down	[]	[{"name": "supervisor_district", "fieldName": "supervisor_district", "description": "Selected column for enhanced dashboard queries"}]	{"id": 10, "original_category": "safety", "original_subcategory": "emergency_response", "original_subsubcategory": null}	t	2025-05-27 20:34:15.325786	2025-05-27 20:34:15.325786
9	🚑 911 Response (minutes) - Danger to property 	response_911_response_minutes_danger_to_property_11	safety	emergency_response	2zdj-bwza	Average response time in minutes for Priority B emergency calls.	Measures the time between when a 911 call is received and when the first unit arrives on scene for Priority B (medium priority, danger to property) calls. Data comes from the Department of Emergency Management's Computer Aided Dispatch (CAD) System. Only includes calls where both received and onscene times are recorded and valid.	https://data.sfgov.org/resource/2zdj-bwza.json	SELECT date_trunc_ymd(received_datetime) as date, AVG((date_extract_y(onscene_datetime) - date_extract_y(received_datetime)) * 525600 + (date_extract_m(onscene_datetime) - date_extract_m(received_datetime)) * 43800 + (date_extract_d(onscene_datetime) - date_extract_d(received_datetime)) * 1440 + (date_extract_hh(onscene_datetime) * 60 + date_extract_mm(onscene_datetime)) - (date_extract_hh(received_datetime) * 60 + date_extract_mm(received_datetime))) as value WHERE received_datetime >= last_year_start AND received_datetime < current_date AND received_datetime IS NOT NULL AND onscene_datetime IS NOT NULL AND received_datetime < onscene_datetime AND priority_final = 'B' GROUP BY date ORDER BY date	SELECT 'Priority B Response Time' as label, max(received_datetime) as max_date, AVG(CASE WHEN received_datetime >= this_year_start AND received_datetime <= this_year_end THEN ((date_extract_y(onscene_datetime) - date_extract_y(received_datetime)) * 525600 + (date_extract_m(onscene_datetime) - date_extract_m(received_datetime)) * 43800 + (date_extract_d(onscene_datetime) - date_extract_d(received_datetime)) * 1440 + (date_extract_hh(onscene_datetime) * 60 + date_extract_mm(onscene_datetime)) - (date_extract_hh(received_datetime) * 60 + date_extract_mm(received_datetime))) END) as this_year, AVG(CASE WHEN received_datetime >= last_year_start AND received_datetime <= last_year_end THEN ((date_extract_y(onscene_datetime) - date_extract_y(received_datetime)) * 525600 + (date_extract_m(onscene_datetime) - date_extract_m(received_datetime)) * 43800 + (date_extract_d(onscene_datetime) - date_extract_d(received_datetime)) * 1440 + (date_extract_hh(onscene_datetime) * 60 + date_extract_mm(onscene_datetime)) - (date_extract_hh(received_datetime) * 60 + date_extract_mm(received_datetime))) END) as last_year, (AVG(CASE WHEN received_datetime >= this_year_start AND received_datetime <= this_year_end THEN ((date_extract_y(onscene_datetime) - date_extract_y(received_datetime)) * 525600 + (date_extract_m(onscene_datetime) - date_extract_m(received_datetime)) * 43800 + (date_extract_d(onscene_datetime) - date_extract_d(received_datetime)) * 1440 + (date_extract_hh(onscene_datetime) * 60 + date_extract_mm(onscene_datetime)) - (date_extract_hh(received_datetime) * 60 + date_extract_mm(received_datetime))) END) - AVG(CASE WHEN received_datetime >= last_year_start AND received_datetime <= last_year_end THEN ((date_extract_y(onscene_datetime) - date_extract_y(received_datetime)) * 525600 + (date_extract_m(onscene_datetime) - date_extract_m(received_datetime)) * 43800 + (date_extract_d(onscene_datetime) - date_extract_d(received_datetime)) * 1440 + (date_extract_hh(onscene_datetime) * 60 + date_extract_mm(onscene_datetime)) - (date_extract_hh(received_datetime) * 60 + date_extract_mm(received_datetime))) END)) as delta, ((AVG(CASE WHEN received_datetime >= this_year_start AND received_datetime <= this_year_end THEN ((date_extract_y(onscene_datetime) - date_extract_y(received_datetime)) * 525600 + (date_extract_m(onscene_datetime) - date_extract_m(received_datetime)) * 43800 + (date_extract_d(onscene_datetime) - date_extract_d(received_datetime)) * 1440 + (date_extract_hh(onscene_datetime) * 60 + date_extract_mm(onscene_datetime)) - (date_extract_hh(received_datetime) * 60 + date_extract_mm(received_datetime))) END) - AVG(CASE WHEN received_datetime >= last_year_start AND received_datetime <= last_year_end THEN ((date_extract_y(onscene_datetime) - date_extract_y(received_datetime)) * 525600 + (date_extract_m(onscene_datetime) - date_extract_m(received_datetime)) * 43800 + (date_extract_d(onscene_datetime) - date_extract_d(received_datetime)) * 1440 + (date_extract_hh(onscene_datetime) * 60 + date_extract_mm(onscene_datetime)) - (date_extract_hh(received_datetime) * 60 + date_extract_mm(received_datetime))) END)) * 100.0 / NULLIF(AVG(CASE WHEN received_datetime >= last_year_start AND received_datetime <= last_year_end THEN ((date_extract_y(onscene_datetime) - date_extract_y(received_datetime)) * 525600 + (date_extract_m(onscene_datetime) - date_extract_m(received_datetime)) * 43800 + (date_extract_d(onscene_datetime) - date_extract_d(received_datetime)) * 1440 + (date_extract_hh(onscene_datetime) * 60 + date_extract_mm(onscene_datetime)) - (date_extract_hh(received_datetime) * 60 + date_extract_mm(received_datetime))) END), 0)) as perc_diff, supervisor_district WHERE received_datetime IS NOT NULL AND onscene_datetime IS NOT NULL AND received_datetime < onscene_datetime AND priority_final = 'B' GROUP BY supervisor_district			t	Responses	down	[]	[{"name": "supervisor_district", "fieldName": "supervisor_district", "description": "Selected column for enhanced dashboard queries"}]	{"id": 11, "original_category": "safety", "original_subcategory": "emergency_response", "original_subsubcategory": null}	t	2025-05-27 20:34:15.325786	2025-05-27 20:34:15.325786
10	🚑 Overdose-Related 911 Calls	overdose_related_911_calls	safety		ed3a-sn39	Count of overdose-related 911 calls received by Emergency Medical Services weekly.	Tracks the number of 911 calls associated with opioid overdoses, as responded to by EMS. Reflects reported data based on patient care records at scene.	https://data.sfgov.org/d/ed3a-sn39	SELECT date_trunc_ymd(week_start_date) AS date, sum(total_overdose_related_911_calls) AS value WHERE week_start_date >= last_year_start AND week_start_date <= current_date GROUP BY date ORDER BY date	SELECT 'Overdose 911 Calls' as label, max(week_start_date) as max_date, sum(CASE WHEN week_start_date >= this_year_start AND week_start_date <= this_year_end THEN total_overdose_related_911_calls END) as this_year, sum(CASE WHEN week_start_date >= last_year_start AND week_start_date <= last_year_end THEN total_overdose_related_911_calls END) as last_year, (sum(CASE WHEN week_start_date >= this_year_start AND week_start_date <= this_year_end THEN total_overdose_related_911_calls END) - sum(CASE WHEN week_start_date >= last_year_start AND week_start_date <= last_year_end THEN total_overdose_related_911_calls END)) as delta, ((sum(CASE WHEN week_start_date >= this_year_start AND week_start_date <= this_year_end THEN total_overdose_related_911_calls END) - sum(CASE WHEN week_start_date >= last_year_start AND week_start_date <= last_year_end THEN total_overdose_related_911_calls END)) * 100.0 / NULLIF(sum(CASE WHEN week_start_date >= last_year_start AND week_start_date <= last_year_end THEN total_overdose_related_911_calls END), 0)) as perc_diff	Overdose-Related 911 Calls by EMS		t	Calls	neutral	[]	[]	{}	t	2025-05-28 14:03:45.008106	2025-05-28 14:30:02.340696
11	🏠 Homeless Complaint 911 Calls	homeless_complaints	Public Safety	Public Safety	2zdj-bwza	Count of 911 calls related to homeless complaints	This metric tracks the number of 911 calls received where the primary issue reported was a complaint related to homelessness. It provides insight into community concerns and areas of focus for service response.	http://localhost:8000/api/metrics	SELECT COUNT(*) as count WHERE received_datetime >= last_year_start AND received_datetime < current_date AND call_type_final LIKE '%Homeless%' GROUP BY date_trunc_ymd(received_datetime) ORDER BY date	SELECT COUNT(*) as count WHERE received_datetime >= this_year_start AND received_datetime <= this_year_end AND call_type_final LIKE '%Homeless%'	911 Call Response Data	Public Safety	t	Items	up	[]	[]	{}	f	2025-05-28 14:35:25.623924	2025-05-28 18:34:23.305668
12	🛍️ New Retail Registrations	retail_new_retail_registrations_16	economy	business	g8m3-pdis	Count of new retail business registrations in San Francisco.	Tracks new retail business registrations through the Treasurer & Tax Collector's Office. Uses NAICS code to identify retail businesses. Each registered business may have multiple locations.	https://data.sfgov.org/resource/g8m3-pdis.json	SELECT date_trunc_ymd(dba_start_date) as date, COUNT(*) as value WHERE dba_start_date >= last_year_start AND dba_start_date <= current_date AND naic_code_description = 'Retail Trade' GROUP BY date ORDER BY date	SELECT 'New Retail Registrations' as label, max(dba_start_date) as max_date, COUNT(CASE WHEN dba_start_date >= this_year_start AND dba_start_date <= this_year_end AND naic_code_description = 'Retail Trade' THEN 1 END) as this_year, COUNT(CASE WHEN dba_start_date >= last_year_start AND dba_start_date <= last_year_end AND naic_code_description = 'Retail Trade' THEN 1 END) as last_year, (COUNT(CASE WHEN dba_start_date >= this_year_start AND dba_start_date <= this_year_end AND naic_code_description = 'Retail Trade' THEN 1 END) - COUNT(CASE WHEN dba_start_date >= last_year_start AND dba_start_date <= last_year_end AND naic_code_description = 'Retail Trade' THEN 1 END)) as delta, ((COUNT(CASE WHEN dba_start_date >= this_year_start AND dba_start_date <= this_year_end AND naic_code_description = 'Retail Trade' THEN 1 END) - COUNT(CASE WHEN dba_start_date >= last_year_start AND dba_start_date <= last_year_end AND naic_code_description = 'Retail Trade' THEN 1 END)) * 100.0 / NULLIF(COUNT(CASE WHEN dba_start_date >= last_year_start AND dba_start_date <= last_year_end AND naic_code_description = 'Retail Trade' THEN 1 END), 0)) as perc_diff, supervisor_district group by supervisor_district			t	Registrations	up	[]	[{"name": "naic_code_description", "fieldName": "naic_code_description", "description": "Selected column for enhanced dashboard queries"}, {"name": "supervisor_district", "fieldName": "supervisor_district", "description": "Selected column for enhanced dashboard queries"}, {"name": "business_corridor", "fieldName": "business_corridor", "description": "Selected column for enhanced dashboard queries"}]	{"id": 16, "original_category": "economy", "original_subcategory": "business", "original_subsubcategory": null}	t	2025-05-27 20:34:15.325786	2025-05-27 20:34:15.325786
13	🏠 New Housing Units Completed	property_new_housing_units_completed_13	economy	housing	j67f-aayr	Count of net new housing units from completed building permits.	Tracks net new housing units that have been certified for occupancy through building permits. Each record represents when new units were approved for occupancy via Initial TCO, Amended TCO, or Certificate of Final Completion (CFC).	https://data.sfgov.org/Housing-and-Buildings/Dwelling-Unit-Completion-Counts-by-Building-Permit/j67f-aayr	SELECT date_trunc_ym(date_issued) as date, SUM(number_of_units_certified) as value WHERE date_issued >= last_year_start AND date_issued <= current_date GROUP BY date ORDER BY date	SELECT '🏗️🏠 New Housing Units' as label, max(date_issued) as max_date, SUM(CASE WHEN date_trunc_ym(date_issued) >= this_year_start AND date_trunc_ym(date_issued) <= this_year_end THEN number_of_units_certified END) as this_year, SUM(CASE WHEN date_trunc_ym(date_issued) >= last_year_start AND date_trunc_ym(date_issued) <= last_year_end THEN number_of_units_certified END) as last_year, (SUM(CASE WHEN date_trunc_ym(date_issued) >= this_year_start AND date_trunc_ym(date_issued) <= this_year_end THEN number_of_units_certified END) - SUM(CASE WHEN date_trunc_ym(date_issued) >= last_year_start AND date_trunc_ym(date_issued) <= last_year_end THEN number_of_units_certified END)) as delta, ((SUM(CASE WHEN date_trunc_ym(date_issued) >= this_year_start AND date_trunc_ym(date_issued) <= this_year_end THEN number_of_units_certified END) - SUM(CASE WHEN date_trunc_ym(date_issued) >= last_year_start AND date_trunc_ym(date_issued) <= last_year_end THEN number_of_units_certified END)) * 100.0 / NULLIF(SUM(CASE WHEN date_trunc_ym(date_issued) >= last_year_start AND date_trunc_ym(date_issued) <= last_year_end THEN number_of_units_certified END), 0)) as perc_diff	Dwelling Unit Completion Counts by Building Permit	Housing and Buildings	t	Units	up	[]	[]	{"id": 13, "original_category": "economy", "original_subcategory": "housing", "original_subsubcategory": null}	t	2025-05-27 20:34:15.325786	2025-05-28 14:26:57.827348
14	🏢 New Business Registrations	business_new_business_registrations_14	economy	business	g8m3-pdis	Count of new business registrations in San Francisco.	Tracks new business registrations through the Treasurer & Tax Collector's Office. Each registered business may have multiple locations. Data is collected through business registration applications and account updates.	https://data.sfgov.org/resource/g8m3-pdis.json	SELECT date_trunc_ymd(dba_start_date) as date, COUNT(*) as value WHERE dba_start_date >= last_year_start AND dba_start_date <= current_date GROUP BY date ORDER BY date	SELECT 'New Business Registrations' as label, max(dba_start_date) as max_date, COUNT(CASE WHEN dba_start_date >= this_year_start AND dba_start_date <= this_year_end THEN 1 END) as this_year, COUNT(CASE WHEN dba_start_date >= last_year_start AND dba_start_date <= last_year_end THEN 1 END) as last_year, (COUNT(CASE WHEN dba_start_date >= this_year_start AND dba_start_date <= this_year_end THEN 1 END) - COUNT(CASE WHEN dba_start_date >= last_year_start AND dba_start_date <= last_year_end THEN 1 END)) as delta, ((COUNT(CASE WHEN dba_start_date >= this_year_start AND dba_start_date <= this_year_end THEN 1 END) - COUNT(CASE WHEN dba_start_date >= last_year_start AND dba_start_date <= last_year_end THEN 1 END)) * 100.0 / NULLIF(COUNT(CASE WHEN dba_start_date >= last_year_start AND dba_start_date <= last_year_end THEN 1 END), 0)) as perc_diff, supervisor_district group by supervisor_district			t	Registrations	up	[]	[{"name": "naic_code_description", "fieldName": "naic_code_description", "description": "Selected column for enhanced dashboard queries"}, {"name": "supervisor_district", "fieldName": "supervisor_district", "description": "Selected column for enhanced dashboard queries"}, {"name": "business_corridor", "fieldName": "business_corridor", "description": "Selected column for enhanced dashboard queries"}]	{"id": 14, "original_category": "economy", "original_subcategory": "business", "original_subsubcategory": null}	t	2025-05-27 20:34:15.325786	2025-05-27 20:34:15.325786
15	🚒 Fire Incidents YTD	fire_fire_incidents_ytd_8	safety	fire	wr8u-xric	Count of all non-medical incidents to which the SF Fire Department responded.	Fire Incidents includes a summary of each (non-medical) incident to which the SF Fire Department responded. Each incident record includes the call number, incident number, address, number and type of each unit responding, call type (as determined by dispatch), prime situation (field observation), actions taken, and property loss.	https://data.sfgov.org/resource/wr8u-xric.json	SELECT date_trunc_ymd(incident_date) as date, COUNT(*) as value WHERE incident_date >= last_year_start AND incident_date <= current_date GROUP BY date ORDER BY date	SELECT 'Total Fire Incidents' as label, max(incident_date) as max_date, COUNT(CASE WHEN incident_date >= this_year_start AND incident_date <= this_year_end THEN 1 END) as this_year, COUNT(CASE WHEN incident_date >= last_year_start AND incident_date <= last_year_end THEN 1 END) as last_year, (COUNT(CASE WHEN incident_date >= this_year_start AND incident_date <= this_year_end THEN 1 END) - COUNT(CASE WHEN incident_date >= last_year_start AND incident_date <= last_year_end THEN 1 END)) as delta, ((COUNT(CASE WHEN incident_date >= this_year_start AND incident_date <= this_year_end THEN 1 END) - COUNT(CASE WHEN incident_date >= last_year_start AND incident_date <= last_year_end THEN 1 END)) * 100.0 / NULLIF(COUNT(CASE WHEN incident_date >= last_year_start AND incident_date <= last_year_end THEN 1 END), 0)) as perc_diff, supervisor_district group by supervisor_district			t	Incidents	down	[]	[{"name": "area_of_fire_origin", "fieldName": "area_of_fire_origin", "description": "Selected column for enhanced dashboard queries"}, {"name": "ignition_cause", "fieldName": "ignition_cause", "description": "Selected column for enhanced dashboard queries"}, {"name": "supervisor_district", "fieldName": "supervisor_district", "description": "Selected column for enhanced dashboard queries"}]	{"id": 8, "original_category": "safety", "original_subcategory": "fire", "original_subsubcategory": null}	t	2025-05-27 20:34:15.325786	2025-05-27 20:34:15.325786
16	💔 Fire Fatalities YTD	fatalities_fire_fatalities_ytd_9	safety	fire	wr8u-xric	Total count of fire-related fatalities, including both civilian and fire personnel fatalities.	Combines both fire fatalities (fire personnel) and civilian fatalities that occurred during fire incidents. Data is collected and reported by the SF Fire Department for each incident.	https://data.sfgov.org/resource/wr8u-xric.json	SELECT date_trunc_ymd(incident_date) as date, sum(fire_fatalities + civilian_fatalities) as value WHERE incident_date >= last_year_start AND incident_date <= current_date GROUP BY date ORDER BY date	SELECT 'Total Fatalities' as label, max(incident_date) as max_date, SUM(CASE WHEN incident_date >= this_year_start AND incident_date <= this_year_end THEN fire_fatalities + civilian_fatalities END) as this_year, SUM(CASE WHEN incident_date >= last_year_start AND incident_date <= last_year_end THEN fire_fatalities + civilian_fatalities END) as last_year, (SUM(CASE WHEN incident_date >= this_year_start AND incident_date <= this_year_end THEN fire_fatalities + civilian_fatalities END) - SUM(CASE WHEN incident_date >= last_year_start AND incident_date <= last_year_end THEN fire_fatalities + civilian_fatalities END)) as delta, ((SUM(CASE WHEN incident_date >= this_year_start AND incident_date <= this_year_end THEN fire_fatalities + civilian_fatalities END) - SUM(CASE WHEN incident_date >= last_year_start AND incident_date <= last_year_end THEN fire_fatalities + civilian_fatalities END)) * 100.0 / NULLIF(SUM(CASE WHEN incident_date >= last_year_start AND incident_date <= last_year_end THEN fire_fatalities + civilian_fatalities END), 0)) as perc_diff, supervisor_district group by supervisor_district			t	Fatalities	down	[]	[{"name": "area_of_fire_origin", "fieldName": "area_of_fire_origin", "description": "Selected column for enhanced dashboard queries"}, {"name": "ignition_cause", "fieldName": "ignition_cause", "description": "Selected column for enhanced dashboard queries"}, {"name": "supervisor_district", "fieldName": "supervisor_district", "description": "Selected column for enhanced dashboard queries"}]	{"id": 9, "original_category": "safety", "original_subcategory": "fire", "original_subsubcategory": null}	t	2025-05-27 20:34:15.325786	2025-05-27 20:34:15.325786
17	🚫 Business Closures	closures_business_closures_15	economy	business	g8m3-pdis	Count of business closures in San Francisco.	Tracks business closures through the Treasurer & Tax Collector's Office. Includes businesses that have formally closed or been administratively closed after 3 years of no filing or communication.	https://data.sfgov.org/resource/g8m3-pdis.json	SELECT date_trunc_ymd(dba_end_date) as date, COUNT(*) as value WHERE dba_end_date >= last_year_start AND dba_end_date <= current_date AND administratively_closed is null GROUP BY date ORDER BY date	SELECT 'Business Closures' as label, max(dba_end_date) as max_date, COUNT(CASE WHEN dba_end_date >= this_year_start AND dba_end_date <= this_year_end AND administratively_closed is null THEN 1 END) as this_year, COUNT(CASE WHEN dba_end_date >= last_year_start AND dba_end_date <= last_year_end AND administratively_closed is null THEN 1 END) as last_year, (COUNT(CASE WHEN dba_end_date >= this_year_start AND dba_end_date <= this_year_end AND administratively_closed is null THEN 1 END) - COUNT(CASE WHEN dba_end_date >= last_year_start AND dba_end_date <= last_year_end AND administratively_closed is null THEN 1 END)) as delta, ((COUNT(CASE WHEN dba_end_date >= this_year_start AND dba_end_date <= this_year_end AND administratively_closed is null THEN 1 END) - COUNT(CASE WHEN dba_end_date >= last_year_start AND dba_end_date <= last_year_end AND administratively_closed is null THEN 1 END)) * 100.0 / NULLIF(COUNT(CASE WHEN dba_end_date >= last_year_start AND dba_end_date <= last_year_end AND administratively_closed is null THEN 1 END), 0)) as perc_diff, supervisor_district group by supervisor_district			t	Closures	down	[]	[{"name": "naic_code_description", "fieldName": "naic_code_description", "description": "Selected column for enhanced dashboard queries"}, {"name": "supervisor_district", "fieldName": "supervisor_district", "description": "Selected column for enhanced dashboard queries"}, {"name": "business_corridor", "fieldName": "business_corridor", "description": "Selected column for enhanced dashboard queries"}]	{"id": 15, "original_category": "economy", "original_subcategory": "business", "original_subsubcategory": null}	t	2025-05-27 20:34:15.325786	2025-05-27 20:34:15.325786
18	🏪 Retail Closures	retail_closures_retail_closures_17	economy	business	g8m3-pdis	Count of retail business closures in San Francisco.	Tracks retail business closures through the Treasurer & Tax Collector's Office. Uses NAICS code to identify retail businesses. Includes businesses that have formally closed or been administratively closed after 3 years of no filing or communication.	https://data.sfgov.org/resource/g8m3-pdis.json	SELECT date_trunc_ymd(dba_end_date) as date, COUNT(*) as value WHERE dba_end_date >= last_year_start AND dba_end_date <= current_date AND naic_code_description = 'Retail Trade' AND administratively_closed is null GROUP BY date ORDER BY date	SELECT 'Retail Closures' as label, max(dba_end_date) as max_date, COUNT(CASE WHEN dba_end_date >= this_year_start AND dba_end_date <= this_year_end AND naic_code_description = 'Retail Trade' AND administratively_closed is null THEN 1 END) as this_year, COUNT(CASE WHEN dba_end_date >= last_year_start AND dba_end_date <= last_year_end AND naic_code_description = 'Retail Trade' AND administratively_closed is null THEN 1 END) as last_year, (COUNT(CASE WHEN dba_end_date >= this_year_start AND dba_end_date <= this_year_end AND naic_code_description = 'Retail Trade' AND administratively_closed is null THEN 1 END) - COUNT(CASE WHEN dba_end_date >= last_year_start AND dba_end_date <= last_year_end AND naic_code_description = 'Retail Trade' AND administratively_closed is null THEN 1 END)) as delta, ((COUNT(CASE WHEN dba_end_date >= this_year_start AND dba_end_date <= this_year_end AND naic_code_description = 'Retail Trade' AND administratively_closed is null THEN 1 END) - COUNT(CASE WHEN dba_end_date >= last_year_start AND dba_end_date <= last_year_end AND naic_code_description = 'Retail Trade' AND administratively_closed is null THEN 1 END)) * 100.0 / NULLIF(COUNT(CASE WHEN dba_end_date >= last_year_start AND dba_end_date <= last_year_end AND naic_code_description = 'Retail Trade' AND administratively_closed is null THEN 1 END), 0)) as perc_diff, supervisor_district group by supervisor_district			t	Closures	down	[]	[{"name": "naic_code_description", "fieldName": "naic_code_description", "description": "Selected column for enhanced dashboard queries"}, {"name": "supervisor_district", "fieldName": "supervisor_district", "description": "Selected column for enhanced dashboard queries"}, {"name": "business_corridor", "fieldName": "business_corridor", "description": "Selected column for enhanced dashboard queries"}]	{"id": 17, "original_category": "economy", "original_subcategory": "business", "original_subsubcategory": null}	t	2025-05-27 20:34:15.325786	2025-05-27 20:34:15.325786
19	📞 311 Cases	cases_311_cases_18	311_cases	311_cases	vw6y-z8j6	Total count of 311 cases reported.	Total count of 311 cases reported.	https://data.sfgov.org/City-Infrastructure/311-Cases/vw6y-z8j6	SELECT date_trunc_ymd(requested_datetime) as date, COUNT(*) as value WHERE requested_datetime >= last_year_start AND requested_datetime <= current_date GROUP BY date ORDER BY date	SELECT '311 Cases' as label, MAX(requested_datetime) as max_date, COUNT(CASE WHEN requested_datetime >= this_year_start AND requested_datetime <= this_year_end THEN 1 END) as this_year, COUNT(CASE WHEN requested_datetime >= last_year_start AND requested_datetime <= last_year_end THEN 1 END) as last_year, (COUNT(CASE WHEN requested_datetime >= this_year_start AND requested_datetime <= this_year_end THEN 1 END) - COUNT(CASE WHEN requested_datetime >= last_year_start AND requested_datetime <= last_year_end THEN 1 END)) as delta, ((COUNT(CASE WHEN requested_datetime >= this_year_start AND requested_datetime <= this_year_end THEN 1 END) - COUNT(CASE WHEN requested_datetime >= last_year_start AND requested_datetime <= last_year_end THEN 1 END)) * 100.0 / NULLIF(COUNT(CASE WHEN requested_datetime >= last_year_start AND requested_datetime <= last_year_end THEN 1 END), 0)) as perc_diff, floor(supervisor_district) as supervisor_district GROUP BY floor(supervisor_district)			t	Cases	neutral	[]	[{"name": "service_name", "fieldName": "service_name", "description": "Selected column for enhanced dashboard queries"}, {"name": "service_subtype", "fieldName": "service_subtype", "description": "Selected column for enhanced dashboard queries"}, {"name": "supervisor_district", "fieldName": "supervisor_district", "description": "Selected column for enhanced dashboard queries"}]	{"id": 18, "original_category": "311_cases", "original_subcategory": "311_cases", "original_subsubcategory": null}	t	2025-05-27 20:34:15.325786	2025-05-27 20:34:15.325786
20	⛺ Encampment 311 Calls	encampment_encampment_calls_19	311_cases	311_cases	vw6y-z8j6	Count of 311 cases related to encampments.	Count of 311 cases where the service subtype contains 'encampment' or 'encampments' or equals 'Encampment Reports'.	https://data.sfgov.org/City-Infrastructure/311-Cases/vw6y-z8j6	SELECT date_trunc_ymd(requested_datetime) as date, COUNT(*) as value WHERE requested_datetime >= last_year_start AND requested_datetime <= current_date AND (service_subtype LIKE '%encampment%' OR service_subtype LIKE '%encampments%' OR service_subtype = 'Encampment Reports') GROUP BY date ORDER BY date	SELECT 'Encampment Calls' as label, MAX(requested_datetime) as max_date, COUNT(CASE WHEN requested_datetime >= this_year_start AND requested_datetime <= this_year_end AND (service_subtype LIKE '%encampment%' OR service_subtype LIKE '%encampments%' OR service_subtype = 'Encampment Reports') THEN 1 END) as this_year, COUNT(CASE WHEN requested_datetime >= last_year_start AND requested_datetime <= last_year_end AND (service_subtype LIKE '%encampment%' OR service_subtype LIKE '%encampments%' OR service_subtype = 'Encampment Reports') THEN 1 END) as last_year, (COUNT(CASE WHEN requested_datetime >= this_year_start AND requested_datetime <= this_year_end AND (service_subtype LIKE '%encampment%' OR service_subtype LIKE '%encampments%' OR service_subtype = 'Encampment Reports') THEN 1 END) - COUNT(CASE WHEN requested_datetime >= last_year_start AND requested_datetime <= last_year_end AND (service_subtype LIKE '%encampment%' OR service_subtype LIKE '%encampments%' OR service_subtype = 'Encampment Reports') THEN 1 END)) as delta, ((COUNT(CASE WHEN requested_datetime >= this_year_start AND requested_datetime <= this_year_end AND (service_subtype LIKE '%encampment%' OR service_subtype LIKE '%encampments%' OR service_subtype = 'Encampment Reports') THEN 1 END) - COUNT(CASE WHEN requested_datetime >= last_year_start AND requested_datetime <= last_year_end AND (service_subtype LIKE '%encampment%' OR service_subtype LIKE '%encampments%' OR service_subtype = 'Encampment Reports') THEN 1 END)) * 100.0 / NULLIF(COUNT(CASE WHEN requested_datetime >= last_year_start AND requested_datetime <= last_year_end AND (service_subtype LIKE '%encampment%' OR service_subtype LIKE '%encampments%' OR service_subtype = 'Encampment Reports') THEN 1 END), 0)) as perc_diff, floor(supervisor_district) as supervisor_district GROUP BY floor(supervisor_district)			t	Calls	neutral	[]	[{"name": "agency_responsible", "fieldName": "agency_responsible", "description": "Selected column for enhanced dashboard queries"}, {"name": "service_name", "fieldName": "service_name", "description": "Selected column for enhanced dashboard queries"}, {"name": "service_subtype", "fieldName": "service_subtype", "description": "Selected column for enhanced dashboard queries"}, {"name": "service_details", "fieldName": "service_details", "description": "Selected column for enhanced dashboard queries"}, {"name": "supervisor_district", "fieldName": "supervisor_district", "description": "Selected column for enhanced dashboard queries"}]	{"id": 19, "original_category": "311_cases", "original_subcategory": "311_cases", "original_subsubcategory": null}	t	2025-05-27 20:34:15.325786	2025-05-27 20:34:15.325786
21	🏠 Homeless Complaint 911 Calls	homeless_complaint_calls	Public Safety	Public Safety	2zdj-bwza	Count of 911 calls related to homeless complaints based on call_type_final_desc.	This metric tracks the number of 911 calls received where the primary issue reported was a complaint related to homelessness. It provides insight into community concerns and areas of focus for service response.	https://data.sfgov.org/resource/2zdj-bwza.json	SELECT date_trunc_ymd(received_datetime) as date, COUNT(*) as value WHERE received_datetime >= last_year_start AND received_datetime < current_date AND received_datetime IS NOT NULL AND LOWER(call_type_final_desc) LIKE '%homeless%' GROUP BY date ORDER BY date	SELECT 'Homeless Complaint Calls' as label, max(received_datetime) as max_date, COUNT(CASE WHEN received_datetime >= this_year_start AND received_datetime <= this_year_end AND LOWER(call_type_final_desc) LIKE '%homeless%' THEN 1 END) as this_year, COUNT(CASE WHEN received_datetime >= last_year_start AND received_datetime <= last_year_end AND LOWER(call_type_final_desc) LIKE '%homeless%' THEN 1 END) as last_year, ( COUNT(CASE WHEN received_datetime >= this_year_start AND received_datetime <= this_year_end AND LOWER(call_type_final_desc) LIKE '%homeless%' THEN 1 END) - COUNT(CASE WHEN received_datetime >= last_year_start AND received_datetime <= last_year_end AND LOWER(call_type_final_desc) LIKE '%homeless%' THEN 1 END) ) as delta, ( ( COUNT(CASE WHEN received_datetime >= this_year_start AND received_datetime <= this_year_end AND LOWER(call_type_final_desc) LIKE '%homeless%' THEN 1 END) - COUNT(CASE WHEN received_datetime >= last_year_start AND received_datetime <= last_year_end AND LOWER(call_type_final_desc) LIKE '%homeless%' THEN 1 END) ) * 100.0 / NULLIF( COUNT(CASE WHEN received_datetime >= last_year_start AND received_datetime <= last_year_end AND LOWER(call_type_final_desc) LIKE '%homeless%' THEN 1 END), 0 ) ) as perc_diff, supervisor_district WHERE received_datetime IS NOT NULL AND LOWER(call_type_final_desc) LIKE '%homeless%' GROUP BY supervisor_district	911 Call Response Data	Public Safety	t	Items	up	[]	[{"name": "call_type_original_notes", "fieldName": "call_type_original_notes", "description": "Selected column for metric analysis"}, {"name": "supervisor_district", "fieldName": "supervisor_district", "description": "Selected column for metric analysis"}]	{}	t	2025-05-28 15:29:10.303687	2025-05-28 18:36:47.565533
22	🚑 911 Response (minutes) - No danger to life or property	response_911_response_minutes_no_danger_to_life_or_property_12	safety	emergency_response	2zdj-bwza	Average response time in minutes for Priority C emergency calls.	Measures the time between when a 911 call is received and when the first unit arrives on scene for Priority C (lowest priority, no danger to life or property) calls. Data comes from the Department of Emergency Management's Computer Aided Dispatch (CAD) System. Only includes calls where both received and onscene times are recorded and valid.	https://data.sfgov.org/resource/2zdj-bwza.json	SELECT date_trunc_ymd(received_datetime) as date, AVG((date_extract_y(onscene_datetime) - date_extract_y(received_datetime)) * 525600 + (date_extract_m(onscene_datetime) - date_extract_m(received_datetime)) * 43800 + (date_extract_d(onscene_datetime) - date_extract_d(received_datetime)) * 1440 + (date_extract_hh(onscene_datetime) * 60 + date_extract_mm(onscene_datetime)) - (date_extract_hh(received_datetime) * 60 + date_extract_mm(received_datetime))) as value WHERE received_datetime >= last_year_start AND received_datetime < current_date AND received_datetime IS NOT NULL AND onscene_datetime IS NOT NULL AND received_datetime < onscene_datetime AND priority_final = 'C' GROUP BY date ORDER BY date	SELECT 'Priority C Response Time' as label, max(received_datetime) as max_date, AVG(CASE WHEN received_datetime >= this_year_start AND received_datetime <= this_year_end THEN ((date_extract_y(onscene_datetime) - date_extract_y(received_datetime)) * 525600 + (date_extract_m(onscene_datetime) - date_extract_m(received_datetime)) * 43800 + (date_extract_d(onscene_datetime) - date_extract_d(received_datetime)) * 1440 + (date_extract_hh(onscene_datetime) * 60 + date_extract_mm(onscene_datetime)) - (date_extract_hh(received_datetime) * 60 + date_extract_mm(received_datetime))) END) as this_year, AVG(CASE WHEN received_datetime >= last_year_start AND received_datetime <= last_year_end THEN ((date_extract_y(onscene_datetime) - date_extract_y(received_datetime)) * 525600 + (date_extract_m(onscene_datetime) - date_extract_m(received_datetime)) * 43800 + (date_extract_d(onscene_datetime) - date_extract_d(received_datetime)) * 1440 + (date_extract_hh(onscene_datetime) * 60 + date_extract_mm(onscene_datetime)) - (date_extract_hh(received_datetime) * 60 + date_extract_mm(received_datetime))) END) as last_year, (AVG(CASE WHEN received_datetime >= this_year_start AND received_datetime <= this_year_end THEN ((date_extract_y(onscene_datetime) - date_extract_y(received_datetime)) * 525600 + (date_extract_m(onscene_datetime) - date_extract_m(received_datetime)) * 43800 + (date_extract_d(onscene_datetime) - date_extract_d(received_datetime)) * 1440 + (date_extract_hh(onscene_datetime) * 60 + date_extract_mm(onscene_datetime)) - (date_extract_hh(received_datetime) * 60 + date_extract_mm(received_datetime))) END) - AVG(CASE WHEN received_datetime >= last_year_start AND received_datetime <= last_year_end THEN ((date_extract_y(onscene_datetime) - date_extract_y(received_datetime)) * 525600 + (date_extract_m(onscene_datetime) - date_extract_m(received_datetime)) * 43800 + (date_extract_d(onscene_datetime) - date_extract_d(received_datetime)) * 1440 + (date_extract_hh(onscene_datetime) * 60 + date_extract_mm(onscene_datetime)) - (date_extract_hh(received_datetime) * 60 + date_extract_mm(received_datetime))) END)) as delta, ((AVG(CASE WHEN received_datetime >= this_year_start AND received_datetime <= this_year_end THEN ((date_extract_y(onscene_datetime) - date_extract_y(received_datetime)) * 525600 + (date_extract_m(onscene_datetime) - date_extract_m(received_datetime)) * 43800 + (date_extract_d(onscene_datetime) - date_extract_d(received_datetime)) * 1440 + (date_extract_hh(onscene_datetime) * 60 + date_extract_mm(onscene_datetime)) - (date_extract_hh(received_datetime) * 60 + date_extract_mm(received_datetime))) END) - AVG(CASE WHEN received_datetime >= last_year_start AND received_datetime <= last_year_end THEN ((date_extract_y(onscene_datetime) - date_extract_y(received_datetime)) * 525600 + (date_extract_m(onscene_datetime) - date_extract_m(received_datetime)) * 43800 + (date_extract_d(onscene_datetime) - date_extract_d(received_datetime)) * 1440 + (date_extract_hh(onscene_datetime) * 60 + date_extract_mm(onscene_datetime)) - (date_extract_hh(received_datetime) * 60 + date_extract_mm(received_datetime))) END)) * 100.0 / NULLIF(AVG(CASE WHEN received_datetime >= last_year_start AND received_datetime <= last_year_end THEN ((date_extract_y(onscene_datetime) - date_extract_y(received_datetime)) * 525600 + (date_extract_m(onscene_datetime) - date_extract_m(received_datetime)) * 43800 + (date_extract_d(onscene_datetime) - date_extract_d(received_datetime)) * 1440 + (date_extract_hh(onscene_datetime) * 60 + date_extract_mm(onscene_datetime)) - (date_extract_hh(received_datetime) * 60 + date_extract_mm(received_datetime))) END), 0)) as perc_diff, supervisor_district WHERE received_datetime IS NOT NULL AND onscene_datetime IS NOT NULL AND received_datetime < onscene_datetime AND priority_final = 'C' GROUP BY supervisor_district			t	Responses	down	[]	[{"name": "supervisor_district", "fieldName": "supervisor_district", "description": "Selected column for enhanced dashboard queries"}]	{"id": 12, "original_category": "safety", "original_subcategory": "emergency_response", "original_subsubcategory": null}	t	2025-05-27 20:34:15.325786	2025-05-27 20:34:15.325786
\.


--
-- Name: metrics_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.metrics_id_seq', 134, true);


--
-- Name: metrics metrics_metric_key_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.metrics
    ADD CONSTRAINT metrics_metric_key_key UNIQUE (metric_key);


--
-- Name: metrics metrics_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.metrics
    ADD CONSTRAINT metrics_pkey PRIMARY KEY (id);


--
-- Name: metrics_active_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX metrics_active_idx ON public.metrics USING btree (is_active);


--
-- Name: metrics_category_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX metrics_category_idx ON public.metrics USING btree (category);


--
-- Name: metrics_endpoint_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX metrics_endpoint_idx ON public.metrics USING btree (endpoint);


--
-- Name: metrics_show_on_dash_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX metrics_show_on_dash_idx ON public.metrics USING btree (show_on_dash);


--
-- Name: metrics_subcategory_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX metrics_subcategory_idx ON public.metrics USING btree (subcategory);


--
-- Name: metrics update_metrics_updated_at; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER update_metrics_updated_at BEFORE UPDATE ON public.metrics FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- PostgreSQL database dump complete
--

